{"version":3,"file":"js/678.1666696473432.09ae9b5d7d02bf67a8ed.js","mappings":"6aAQO,SAASA,I,IAAK,sDAMnB,OALW,QAAY,GAAI,EAAF,CACvB,KACA,EAAAC,EAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YACvDC,GAAU,I,cCmBjB,QAzBY,WACV,IAEQC,GAFO,EAAAC,EAAA,KAEe,YACtBC,EAAYF,EAAW,QAkB/B,OAhBA,IAAAG,YAAU,WACRC,MAAM,mDACHC,MAA0C,SAACC,GAAa,OAAAA,EAASC,UACjEF,MAAK,SAAC,G,IAAEG,EAAI,OAGX,OAAAR,EAAYS,IACV,WACAD,EAAKE,KAAI,SAAC,GAAgB,OAAP,iBAGtBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIG,cAEnB,CAACf,IAEG,kBAACE,EAAO,O,sBCxBjB,IAAMc,EAAOC,SAASC,eAAe,QAErC,WAAgB,mBCEC,WAAM,OACrB,kBAAC,KAAQ,CACPC,MAAOvB,EAAA,WAAK,EAC6C,IACvDwB,YAEF,kBAAC,gBAAM,CAACC,UAAU,QAAYC,OAAOC,SAASC,WAC5C,kBAAC,EAAG,UDTe,MAAKR,GAAM,WAClC,OAAAA,aAAI,EAAJA,EAAMS,aAAa,iBAAkB","sources":["webpack:///./src/store/index.ts","webpack:///./src/App.tsx","webpack:///./src/bootstrap.tsx","webpack:///./src/AppEntry.tsx"],"sourcesContent":["import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware } from 'redux';\n\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import React, { useEffect } from 'react';\n\nimport './App.scss';\nimport { QuickStart } from '@patternfly/quickstarts';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst App = () => {\n  const chrome = useChrome();\n\n  const { quickStarts } = chrome;\n  const { Catalog } = quickStarts;\n\n  useEffect(() => {\n    fetch(`/api/quickstarts/v1/quickstarts?bundle=settings`)\n      .then<{ data: { content: QuickStart }[] }>((response) => response.json())\n      .then(({ data }) =>\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        quickStarts.set(\n          'settings',\n          data.map(({ content }) => content)\n        )\n      )\n      .catch((err) => {\n        console.log(err.message);\n      });\n  }, [quickStarts]);\n\n  return <Catalog />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root, () =>\n  root?.setAttribute('data-ouia-safe', 'true')\n);\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider\n    store={init(\n      ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n    ).getStore()}\n  >\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n"],"names":["init","notificationsMiddleware","errorDescriptionKey","middleware","quickStarts","useChrome","Catalog","useEffect","fetch","then","response","json","data","set","map","catch","err","console","log","message","root","document","getElementById","store","getStore","basename","window","location","pathname","setAttribute"],"sourceRoot":""}