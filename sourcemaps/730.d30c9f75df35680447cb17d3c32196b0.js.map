{"version":3,"file":"js/730.1688669797749.6162848cc71b732ccab1.js","mappings":"qMA+BaA,EAAgB,SAACC,G,UACtB,EAOF,eAA0C,EAAAC,mBAN5CC,EAAkB,qBAClBC,EAAmB,sBACnBC,EAAc,iBACdC,EAAM,SACNC,EAAS,YACTC,EAAO,UAGHC,GAAS,SAEPC,EAAgBD,EAAM,YACxBE,GAAeV,aAAK,EAALA,EAAOW,SAAU,WAEX,QAA3B,EAAAH,aAAM,EAANA,EAAQI,2BAAmB,gBAAG,uBAE9B,IAAAC,YAAU,WACRC,MAAM,iDAA0CJ,IAC7CK,MAA0C,SAACC,GAAa,OAAAA,EAASC,UACjEF,MAAK,SAAC,G,IAAEG,EAAI,OAGX,OAAAT,EAAYU,IACV,UAAGT,GACHQ,EAAKE,KAAI,SAAC,GAAgB,OAAP,iBAGtBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIG,cAEnB,IAEH,IAAMC,EAAU,SAACC,EAAgBC,GAC/B,OAAAD,EAAGE,KAAKC,YAAYC,cAAcH,EAAGC,KAAKC,cAEtC,EAAgD,cAGpD,IAAAE,mBACE5B,GAAkB,IAClBC,aAAM,EAANA,EAAQ4B,UAAW,GACL,QAAd,EAAA5B,aAAM,EAANA,EAAQ6B,cAAM,eAAEC,cAChBhC,GAAuB,IACvBiC,KAAKV,IARFW,EAAmB,KAAEC,EAAsB,KAWlD,eAAgB,W,MAEdA,GACE,IAAAN,mBACE5B,GAAkB,IAClBC,aAAM,EAANA,EAAQ4B,UAAW,GACL,QAAd,EAAA5B,aAAM,EAANA,EAAQ6B,cAAM,eAAEC,cAChBhC,GAAuB,IACvBiC,KAAKV,MAER,CACDvB,EACAC,EACAC,aAAM,EAANA,EAAQ4B,QACM,QAAd,EAAA5B,aAAM,EAANA,EAAQ6B,cAAM,eAAEC,gBAGlB,IA0BMI,EACJ,oCACE,kBAAC,EAAAC,yBAAwB,KACvB,kBAAC,EAAAC,YAAW,CAACC,UAAU,cACrB,kBAAC,EAAAC,KAAI,CAACC,UAAU,MAAI,gBACpB,kBAAC,EAAAD,KAAI,CAACC,UAAU,IAAIF,UAAU,eAAa,4DAI7C,kBAAC,EAAAG,QAAO,CAACH,UAAU,qCAAqCI,WAAS,GAC9D1C,aAAc,EAAdA,EACGC,QACA,SAAC0C,GACC,OAACA,EAAWC,SAASC,yBAExB7B,KAAI,SAAC2B,GAEU,IAAMG,EAChBH,EAAU,cAEd,OACE,kBAAC,EAAAI,YAAW,CACVC,IAAKF,EACLR,UAAU,2CAEV,kBAAC,EAAAW,eAAc,CACbN,WAAYA,EACZO,SAAUJ,IAAOhD,EACjBgC,QAAQ,IAAAqB,qBAAoBpD,GAAuB,GAAI+C,WAOrE,kBAAC,EAAAM,QAAO,MACR,kBAAC,EAAAhB,yBAAwB,KACvB,kBAAC,EAAAC,YAAW,CAACC,UAAU,cACrB,kBAAC,EAAAC,KAAI,CAACC,UAAU,MAAI,iBACpB,kBAAC,EAAAD,KAAI,CAACC,UAAU,IAAIF,UAAU,eAAa,qEAI7C,kBAAC,EAAAG,QAAO,CAACH,UAAU,qCAAqCI,WAAS,GAC9D1C,aAAc,EAAdA,EACGC,QACA,SAAC0C,GACC,OAAAA,EAAWC,SAASC,yBAEvB7B,KAAI,SAAC2B,GAEU,IAAMG,EAChBH,EAAU,cAEd,OACE,kBAAC,EAAAI,YAAW,CACVC,IAAKF,EACLR,UAAU,2CAEV,kBAAC,EAAAW,eAAc,CACbN,WAAYA,EACZO,SAAUJ,IAAOhD,EACjBgC,QAAQ,IAAAqB,qBAAoBpD,GAAuB,GAAI+C,YAqBzE,OAAI3C,EACK,kBAAC,EAAAkD,WAAU,MAIlB,oCACE,kBAAC,EAAAC,wBAAuB,CAACC,MAAM,uBAC/B,kBAAC,EAAAH,QAAO,CAACZ,UAAU,QACnB,kBAAC,EAAAgB,yBAAwB,KACvB,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,YAAW,CAACpB,UAAU,2CACrB,kBAAC,EAAAqB,YAAW,CACVC,YAAa,uBACbC,SAAU,SAACC,EAAKC,GAAQ,OA1HR,SAACC,G,MACrBC,GAAS,IAAArC,mBACb5B,GAAkB,GAClBgE,EACc,QAAd,EAAA/D,aAAM,EAANA,EAAQ6B,cAAM,eAAEC,cAChBhC,GAAuB,IACvBiC,MAAK,SAACT,EAAgBC,GACtB,OAAAD,EAAGE,KAAKC,YAAYC,cAAcH,EAAGC,KAAKC,gBAE5CxB,EAAU,UAAW8D,GACrB9B,EAAuB+B,GAgHWC,CAAoBH,OAGhD,kBAAC,EAAAI,qCAAoC,CACnCC,eAjHa,SAACC,GACtB,IAAMJ,GAAS,IAAArC,mBACb5B,GAAkB,IAClBC,aAAM,EAANA,EAAQ4B,UAAW,GACnBwC,EACAtE,GAAuB,IACvBiC,MAAK,SAACT,EAAgBC,GACtB,OAAAD,EAAGE,KAAKC,YAAYC,cAAcH,EAAGC,KAAKC,gBAE5CxB,EAAU,SAAUmE,GACpBnC,EAAuB+B,MAyGjB,kBAAC,EAAAK,oCAAmC,CAClCC,iBAAkBtC,EAAoBuC,WAI5C,kBAAC,EAAApB,QAAO,CAACZ,UAAU,QACa,IAA/BP,EAAoBuC,OACnB,kBAAC,EAAAC,4BAA2B,CAACC,aArCd,WACnBxE,EAAU,UAAW,IACrBA,EAAU,SAAU,KACpB,IAAAyE,qBACAzC,GACElC,aAAc,EAAdA,EAAgBgC,MAAK,SAACT,EAAgBC,GACpC,OAAAD,EAAGE,KAAKC,YAAYC,cAAcH,EAAGC,KAAKC,kBACvC,OA+BDO,EAAoBuC,UAAWxE,aAAc,EAAdA,EAAgBwE,QACjD,kBAAC,EAAAI,kBAAiB,CAACvE,YAAa4B,IAC9B,K,gVCrNV,QAZiB,SAACrC,GAAe,OAC/B,kBAAC,KAAQ,CACPiF,MAAO,eAAK,EAC6C,IACvDC,YAEF,kBAAC,gBAAM,CAACC,UAAU,QAAYC,OAAOC,SAASC,WAC5C,kBAAC,IAAG,KAAKtF,Q,6QCPR,SAASuF,I,IAAK,sDAMnB,OALW,QAAY,GAAI,EAAF,CACvB,KACA,QAAwB,CAAEC,oBAAqB,CAAC,SAAU,YACvDC,GAAU","sources":["webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/store/index.ts"],"sourcesContent":["import React, { useEffect } from 'react';\nimport './App.scss';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport {\n  LoadingBox,\n  QuickStart,\n  QuickStartCatalog,\n  QuickStartCatalogEmptyState,\n  QuickStartCatalogFilterCountWrapper,\n  QuickStartCatalogFilterStatusWrapper,\n  QuickStartCatalogHeader,\n  QuickStartCatalogSection,\n  QuickStartCatalogToolbar,\n  QuickStartContext,\n  QuickStartContextValues,\n  QuickStartTile,\n  clearFilterParams,\n  filterQuickStarts,\n  getQuickStartStatus,\n} from '@patternfly/quickstarts';\nimport {\n  Divider,\n  Gallery,\n  GalleryItem,\n  SearchInput,\n  Text,\n  TextContent,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\n\nexport const App: React.FC = (props: any) => {\n  const {\n    activeQuickStartID,\n    allQuickStartStates,\n    allQuickStarts,\n    filter,\n    setFilter,\n    loading,\n  } = React.useContext<QuickStartContextValues>(QuickStartContext);\n\n  const chrome = useChrome();\n\n  const { quickStarts } = chrome;\n  const targetBundle = props?.bundle || 'settings';\n\n  chrome?.updateDocumentTitle?.('Learning Resources');\n\n  useEffect(() => {\n    fetch(`/api/quickstarts/v1/quickstarts?bundle=${targetBundle}`)\n      .then<{ data: { content: QuickStart }[] }>((response) => response.json())\n      .then(({ data }) =>\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        quickStarts.set(\n          `${targetBundle}`,\n          data.map(({ content }) => content)\n        )\n      )\n      .catch((err) => {\n        console.log(err.message);\n      });\n  }, []);\n\n  const sortFnc = (q1: QuickStart, q2: QuickStart) =>\n    q1.spec.displayName.localeCompare(q2.spec.displayName);\n\n  const [filteredQuickStarts, setFilteredQuickStarts] = React.useState<\n    QuickStart[]\n  >(\n    filterQuickStarts(\n      allQuickStarts || [],\n      filter?.keyword || '',\n      filter?.status?.statusFilters,\n      allQuickStartStates || {}\n    ).sort(sortFnc)\n  );\n\n  React.useEffect(() => {\n    // callback on state change\n    setFilteredQuickStarts(\n      filterQuickStarts(\n        allQuickStarts || [],\n        filter?.keyword || '',\n        filter?.status?.statusFilters,\n        allQuickStartStates || {}\n      ).sort(sortFnc)\n    );\n  }, [\n    allQuickStartStates,\n    allQuickStarts,\n    filter?.keyword,\n    filter?.status?.statusFilters,\n  ]);\n\n  const onSearchInputChange = (searchValue: string) => {\n    const result = filterQuickStarts(\n      allQuickStarts || [],\n      searchValue,\n      filter?.status?.statusFilters,\n      allQuickStartStates || {}\n    ).sort((q1: QuickStart, q2: QuickStart) =>\n      q1.spec.displayName.localeCompare(q2.spec.displayName)\n    );\n    setFilter('keyword', searchValue);\n    setFilteredQuickStarts(result);\n  };\n\n  const onStatusChange = (statusList: string[]) => {\n    const result = filterQuickStarts(\n      allQuickStarts || [],\n      filter?.keyword || '',\n      statusList,\n      allQuickStartStates || {}\n    ).sort((q1: QuickStart, q2: QuickStart) =>\n      q1.spec.displayName.localeCompare(q2.spec.displayName)\n    );\n    setFilter('status', statusList);\n    setFilteredQuickStarts(result);\n  };\n\n  const CatalogWithSections = (\n    <>\n      <QuickStartCatalogSection>\n        <TextContent className=\"pf-u-mb-sm\">\n          <Text component=\"h2\">Quick starts</Text>\n          <Text component=\"p\" className=\"catalog-sub\">\n            Quick starts for using the Red Hat Hybrid Cloud Console\n          </Text>\n        </TextContent>\n        <Gallery className=\"pfext-quick-start-catalog__gallery\" hasGutter>\n          {allQuickStarts\n            ?.filter(\n              (quickStart: QuickStart) =>\n                !quickStart.metadata.externalDocumentation\n            )\n            .map((quickStart: QuickStart) => {\n              const {\n                metadata: { name: id },\n              } = quickStart;\n\n              return (\n                <GalleryItem\n                  key={id}\n                  className=\"pfext-quick-start-catalog__gallery-item\"\n                >\n                  <QuickStartTile\n                    quickStart={quickStart}\n                    isActive={id === activeQuickStartID}\n                    status={getQuickStartStatus(allQuickStartStates || {}, id)}\n                  />\n                </GalleryItem>\n              );\n            })}\n        </Gallery>\n      </QuickStartCatalogSection>\n      <Divider />\n      <QuickStartCatalogSection>\n        <TextContent className=\"pf-u-mb-sm\">\n          <Text component=\"h2\">Documentation</Text>\n          <Text component=\"p\" className=\"catalog-sub\">\n            Technical information for using the Red Hat Hybrid Cloud Console\n          </Text>\n        </TextContent>\n        <Gallery className=\"pfext-quick-start-catalog__gallery\" hasGutter>\n          {allQuickStarts\n            ?.filter(\n              (quickStart: QuickStart) =>\n                quickStart.metadata.externalDocumentation\n            )\n            .map((quickStart: QuickStart) => {\n              const {\n                metadata: { name: id },\n              } = quickStart;\n\n              return (\n                <GalleryItem\n                  key={id}\n                  className=\"pfext-quick-start-catalog__gallery-item\"\n                >\n                  <QuickStartTile\n                    quickStart={quickStart}\n                    isActive={id === activeQuickStartID}\n                    status={getQuickStartStatus(allQuickStartStates || {}, id)}\n                  />\n                </GalleryItem>\n              );\n            })}\n        </Gallery>\n      </QuickStartCatalogSection>\n    </>\n  );\n\n  const clearFilters = () => {\n    setFilter('keyword', '');\n    setFilter('status', []);\n    clearFilterParams();\n    setFilteredQuickStarts(\n      allQuickStarts?.sort((q1: QuickStart, q2: QuickStart) =>\n        q1.spec.displayName.localeCompare(q2.spec.displayName)\n      ) || []\n    );\n  };\n\n  if (loading) {\n    return <LoadingBox />;\n  }\n\n  return (\n    <>\n      <QuickStartCatalogHeader title=\"Learning Resources\" />\n      <Divider component=\"div\" />\n      <QuickStartCatalogToolbar>\n        <ToolbarContent>\n          <ToolbarItem className=\"pfext-quick-start-catalog-filter__input\">\n            <SearchInput\n              placeholder={'Filter by keyword...'}\n              onChange={(_ev, str) => onSearchInputChange(str)}\n            />\n          </ToolbarItem>\n          <QuickStartCatalogFilterStatusWrapper\n            onStatusChange={onStatusChange}\n          />\n          <QuickStartCatalogFilterCountWrapper\n            quickStartsCount={filteredQuickStarts.length}\n          />\n        </ToolbarContent>\n      </QuickStartCatalogToolbar>\n      <Divider component=\"div\" />\n      {filteredQuickStarts.length === 0 ? (\n        <QuickStartCatalogEmptyState clearFilters={clearFilters} />\n      ) : filteredQuickStarts.length !== allQuickStarts?.length ? (\n        <QuickStartCatalog quickStarts={filteredQuickStarts} />\n      ) : (\n        CatalogWithSections\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport { App } from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst AppEntry = (props: any) => (\n  <Provider\n    store={init(\n      ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n    ).getStore()}\n  >\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App {...props} />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware } from 'redux';\n\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n"],"names":["App","props","QuickStartContext","activeQuickStartID","allQuickStartStates","allQuickStarts","filter","setFilter","loading","chrome","quickStarts","targetBundle","bundle","updateDocumentTitle","useEffect","fetch","then","response","json","data","set","map","catch","err","console","log","message","sortFnc","q1","q2","spec","displayName","localeCompare","filterQuickStarts","keyword","status","statusFilters","sort","filteredQuickStarts","setFilteredQuickStarts","CatalogWithSections","QuickStartCatalogSection","TextContent","className","Text","component","Gallery","hasGutter","quickStart","metadata","externalDocumentation","id","GalleryItem","key","QuickStartTile","isActive","getQuickStartStatus","Divider","LoadingBox","QuickStartCatalogHeader","title","QuickStartCatalogToolbar","ToolbarContent","ToolbarItem","SearchInput","placeholder","onChange","_ev","str","searchValue","result","onSearchInputChange","QuickStartCatalogFilterStatusWrapper","onStatusChange","statusList","QuickStartCatalogFilterCountWrapper","quickStartsCount","length","QuickStartCatalogEmptyState","clearFilters","clearFilterParams","QuickStartCatalog","store","getStore","basename","window","location","pathname","init","errorDescriptionKey","middleware"],"sourceRoot":""}