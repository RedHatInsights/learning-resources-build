{"version":3,"file":"js/exposed-./RootApp.869436eec1a6480c0a8e.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/helpers/KeyboardHandler.js","webpack:///./src/AppEntry.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state.mjs';\nexport var EmptyStateVariant;\n(function (EmptyStateVariant) {\n    EmptyStateVariant[\"xs\"] = \"xs\";\n    EmptyStateVariant[\"sm\"] = \"sm\";\n    EmptyStateVariant[\"lg\"] = \"lg\";\n    EmptyStateVariant[\"xl\"] = \"xl\";\n    EmptyStateVariant[\"full\"] = \"full\";\n})(EmptyStateVariant || (EmptyStateVariant = {}));\nexport const EmptyState = (_a) => {\n    var { children, className, variant = EmptyStateVariant.full, isFullHeight } = _a, props = __rest(_a, [\"children\", \"className\", \"variant\", \"isFullHeight\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.emptyState, variant === 'xs' && styles.modifiers.xs, variant === 'sm' && styles.modifiers.sm, variant === 'lg' && styles.modifiers.lg, variant === 'xl' && styles.modifiers.xl, isFullHeight && styles.modifiers.fullHeight, className) }, props),\n        React.createElement(\"div\", { className: css(styles.emptyStateContent) }, children)));\n};\nEmptyState.displayName = 'EmptyState';\n//# sourceMappingURL=EmptyState.js.map","import * as React from 'react';\nimport { canUseDOM } from './util';\n/**\n * This function is a helper for handling basic arrow keyboard interactions. If a component already has its own key handler and event start up/tear down, this function may be easier to integrate in over the full component.\n *\n * @param {event} event Event triggered by the keyboard\n * @param {element[]} navigableElements Valid traversable elements of the container\n * @param {function} isActiveElement Callback to determine if a given element from the navigable elements array is the active element of the page\n * @param {function} getFocusableElement Callback returning the focusable element of a given element from the navigable elements array\n * @param {string[]} validSiblingTags Valid sibling tags that horizontal arrow handling will focus\n * @param {boolean} noVerticalArrowHandling Flag indicating that the included vertical arrow key handling should be ignored\n * @param {boolean} noHorizontalArrowHandling Flag indicating that the included horizontal arrow key handling should be ignored\n * @param {boolean} updateTabIndex Flag indicating that the tabIndex of the currently focused element and next focused element should be updated, in the case of using a roving tabIndex\n * @param {boolean} onlyTraverseSiblings Flag indicating that next focusable element of a horizontal movement will be this element's sibling\n */\nexport const handleArrows = (event, navigableElements, isActiveElement = (element) => document.activeElement.contains(element), getFocusableElement = (element) => element, validSiblingTags = ['A', 'BUTTON', 'INPUT'], noVerticalArrowHandling = false, noHorizontalArrowHandling = false, updateTabIndex = true, onlyTraverseSiblings = true) => {\n    const activeElement = document.activeElement;\n    const key = event.key;\n    let moveTarget = null;\n    // Handle vertical arrow keys. If noVerticalArrowHandling is passed, skip this block\n    if (!noVerticalArrowHandling) {\n        if (['ArrowUp', 'ArrowDown'].includes(key)) {\n            event.preventDefault();\n            event.stopImmediatePropagation(); // For menus in menus\n            // Traverse navigableElements to find the element which is currently active\n            let currentIndex = -1;\n            // while (currentIndex === -1) {\n            navigableElements.forEach((element, index) => {\n                if (isActiveElement(element)) {\n                    // Once found, move up or down the array by 1. Determined by the vertical arrow key direction\n                    let increment = 0;\n                    // keep increasing the increment until you've tried the whole navigableElement\n                    while (!moveTarget && increment < navigableElements.length && increment * -1 < navigableElements.length) {\n                        key === 'ArrowUp' ? increment-- : increment++;\n                        currentIndex = index + increment;\n                        if (currentIndex >= navigableElements.length) {\n                            currentIndex = 0;\n                        }\n                        if (currentIndex < 0) {\n                            currentIndex = navigableElements.length - 1;\n                        }\n                        // Set the next target element (undefined if none found)\n                        moveTarget = getFocusableElement(navigableElements[currentIndex]);\n                    }\n                }\n            });\n            // }\n        }\n    }\n    // Handle horizontal arrow keys. If noHorizontalArrowHandling is passed, skip this block\n    if (!noHorizontalArrowHandling) {\n        if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n            event.preventDefault();\n            event.stopImmediatePropagation(); // For menus in menus\n            let currentIndex = -1;\n            navigableElements.forEach((element, index) => {\n                if (isActiveElement(element)) {\n                    const activeRow = navigableElements[index].querySelectorAll(validSiblingTags.join(',')); // all focusable elements in my row\n                    if (!activeRow.length || onlyTraverseSiblings) {\n                        let nextSibling = activeElement;\n                        // While a sibling exists, check each sibling to determine if it should be focussed\n                        while (nextSibling) {\n                            // Set the next checked sibling, determined by the horizontal arrow key direction\n                            nextSibling = key === 'ArrowLeft' ? nextSibling.previousElementSibling : nextSibling.nextElementSibling;\n                            if (nextSibling) {\n                                if (validSiblingTags.includes(nextSibling.tagName)) {\n                                    // If the sibling's tag is included in validSiblingTags, set the next target element and break the loop\n                                    moveTarget = nextSibling;\n                                    break;\n                                }\n                                // If the sibling's tag is not valid, skip to the next sibling if possible\n                            }\n                        }\n                    }\n                    else {\n                        activeRow.forEach((focusableElement, index) => {\n                            if (event.target === focusableElement) {\n                                // Once found, move up or down the array by 1. Determined by the vertical arrow key direction\n                                const increment = key === 'ArrowLeft' ? -1 : 1;\n                                currentIndex = index + increment;\n                                if (currentIndex >= activeRow.length) {\n                                    currentIndex = 0;\n                                }\n                                if (currentIndex < 0) {\n                                    currentIndex = activeRow.length - 1;\n                                }\n                                // Set the next target element\n                                moveTarget = activeRow[currentIndex];\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    }\n    if (moveTarget) {\n        // If updateTabIndex is true, set the previously focussed element's tabIndex to -1 and the next focussed element's tabIndex to 0\n        // This updates the tabIndex for a roving tabIndex\n        if (updateTabIndex) {\n            activeElement.tabIndex = -1;\n            moveTarget.tabIndex = 0;\n        }\n        // If a move target has been set by either arrow handler, focus that target\n        moveTarget.focus();\n    }\n};\n/**\n * This function is a helper for setting the initial tabIndexes in a roving tabIndex\n *\n * @param {HTMLElement[]} options Array of elements which should have a tabIndex of -1, except for the first element which will have a tabIndex of 0\n */\nexport const setTabIndex = (options) => {\n    if (options && options.length > 0) {\n        // Iterate the options and set the tabIndex to -1 on every option\n        options.forEach((option) => {\n            option.tabIndex = -1;\n        });\n        // Manually set the tabIndex of the first option to 0\n        options[0].tabIndex = 0;\n    }\n};\nclass KeyboardHandler extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.keyHandler = (event) => {\n            const { isEventFromContainer } = this.props;\n            // If the passed keyboard event is not from the container, ignore the event by returning\n            if (isEventFromContainer ? !isEventFromContainer(event) : !this._isEventFromContainer(event)) {\n                return;\n            }\n            const { isActiveElement, getFocusableElement, noVerticalArrowHandling, noHorizontalArrowHandling, noEnterHandling, noSpaceHandling, updateTabIndex, validSiblingTags, additionalKeyHandler, createNavigableElements, onlyTraverseSiblings } = this.props;\n            // Pass the event off to be handled by any custom handler\n            additionalKeyHandler && additionalKeyHandler(event);\n            // Initalize navigableElements from the createNavigableElements callback\n            const navigableElements = createNavigableElements();\n            if (!navigableElements) {\n                // eslint-disable-next-line no-console\n                console.warn('No navigable elements have been passed to the KeyboardHandler. Keyboard navigation provided by this component will be ignored.');\n                return;\n            }\n            const key = event.key;\n            // Handle enter key. If noEnterHandling is passed, skip this block\n            if (!noEnterHandling) {\n                if (key === 'Enter') {\n                    event.preventDefault();\n                    event.stopImmediatePropagation(); // For menus in menus\n                    document.activeElement.click();\n                }\n            }\n            // Handle space key. If noSpaceHandling is passed, skip this block\n            if (!noSpaceHandling) {\n                if (key === ' ') {\n                    event.preventDefault();\n                    event.stopImmediatePropagation(); // For menus in menus\n                    document.activeElement.click();\n                }\n            }\n            // Inject helper handler for arrow navigation\n            handleArrows(event, navigableElements, isActiveElement, getFocusableElement, validSiblingTags, noVerticalArrowHandling, noHorizontalArrowHandling, updateTabIndex, onlyTraverseSiblings);\n        };\n        this._isEventFromContainer = (event) => {\n            const { containerRef } = this.props;\n            return containerRef.current && containerRef.current.contains(event.target);\n        };\n    }\n    componentDidMount() {\n        if (canUseDOM) {\n            window.addEventListener('keydown', this.keyHandler);\n        }\n    }\n    componentWillUnmount() {\n        if (canUseDOM) {\n            window.removeEventListener('keydown', this.keyHandler);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nKeyboardHandler.displayName = 'KeyboardHandler';\nKeyboardHandler.defaultProps = {\n    containerRef: null,\n    createNavigableElements: () => null,\n    isActiveElement: (navigableElement) => document.activeElement === navigableElement,\n    getFocusableElement: (navigableElement) => navigableElement,\n    validSiblingTags: ['BUTTON', 'A'],\n    onlyTraverseSiblings: true,\n    updateTabIndex: true,\n    noHorizontalArrowHandling: false,\n    noVerticalArrowHandling: false,\n    noEnterHandling: false,\n    noSpaceHandling: false\n};\nexport { KeyboardHandler };\n//# sourceMappingURL=KeyboardHandler.js.map","import React from 'react';\nimport { Viewer } from './Viewer';\n\nconst AppEntry = (props: { bundle: string }) => <Viewer {...props} />;\n\nexport default AppEntry;\n"],"names":["EmptyStateVariant","EmptyState","_a","children","className","variant","full","isFullHeight","props","__rest","Object","assign","emptyState","modifiers","xs","sm","lg","xl","fullHeight","emptyStateContent","displayName","handleArrows","event","navigableElements","isActiveElement","element","document","activeElement","contains","getFocusableElement","validSiblingTags","noVerticalArrowHandling","noHorizontalArrowHandling","updateTabIndex","onlyTraverseSiblings","key","moveTarget","includes","preventDefault","stopImmediatePropagation","currentIndex","forEach","index","increment","length","activeRow","querySelectorAll","join","nextSibling","previousElementSibling","nextElementSibling","tagName","focusableElement","target","tabIndex","focus","KeyboardHandler","constructor","super","arguments","this","keyHandler","isEventFromContainer","_isEventFromContainer","noEnterHandling","noSpaceHandling","additionalKeyHandler","createNavigableElements","console","warn","click","containerRef","current","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","defaultProps","navigableElement"],"sourceRoot":""}