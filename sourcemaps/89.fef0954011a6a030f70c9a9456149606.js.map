{"version":3,"file":"js/89.1665588038705.5f7b97df7471b9425693.js","mappings":"4OA8CA,QA/BY,WACV,IAAMA,GAAU,IAAAC,cACVC,GAAS,SAqBf,OAnBA,IAAAC,YAAU,WACR,IAAIC,EACJ,GAAIF,EAAQ,EACO,UACRG,SAAS,CAAEC,cAAe,OAC7B,MAAsBJ,EAAOK,OAA3BC,EAAW,cAAEC,EAAE,KAGvBD,EAAY,QACZE,SAASR,OAAOM,YAAY,qBAC5BJ,EAAaK,EAAG,kBAAkB,SAACE,GACjC,OAAAX,EAAQY,KAAK,WAAID,EAAME,WAG3B,OAAO,WACLT,OAED,CAACF,IAGF,kBAAC,EAAAY,SAAQ,KACP,kBAAC,KAAmB,MACpB,kBAAC,IAAM,S,8HCrBb,QAZiB,WAAM,OACrB,kBAAC,KAAQ,CACPC,MAAO,eAAK,EAC6C,IACvDC,YAEF,kBAAC,gBAAM,CAACC,UAAU,QAAYC,OAAOC,SAASC,WAC5C,kBAAC,IAAG,U,0ECVJC,GAAa,IAAAC,OACjB,WACE,yCAIEC,GAAW,IAAAD,OACf,WAAM,yCAEFE,GAAoB,IAAAF,OACxB,WACE,yCAaSG,EAAS,WAAM,OAC1B,kBAAC,EAAAC,SAAQ,CACPC,SACE,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,QAAO,QAIZ,kBAAC,EAAAC,OAAM,KACL,kBAAC,EAAAC,MAAK,CAACC,KAAK,UAAUC,UAAWZ,IACjC,kBAAC,EAAAU,MAAK,CAACC,KAAK,QAAQC,UAAWV,IAC/B,kBAAC,EAAAQ,MAAK,CAACC,KAAK,kBAAkBC,UAAWT,IAEzC,kBAAC,EAAAO,MAAK,KACJ,kBAAC,EAAAG,SAAQ,CAACC,GAAG,iB,6QCnCd,SAAS5B,I,IAAK,sDAMnB,OALW,QAAY,GAAI,EAAF,CACvB,KACA,QAAwB,CAAE6B,oBAAqB,CAAC,SAAU,YACvDC,GAAU,M","sources":["webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/Routes.tsx","webpack:///./src/store/index.ts"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Reducer } from 'redux';\n\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport pckg from '../package.json';\n\ntype Unregister = () => void;\n\nconst App = () => {\n  const history = useHistory();\n  const chrome = useChrome();\n\n  useEffect(() => {\n    let unregister: Unregister;\n    if (chrome) {\n      const registry = getRegistry();\n      registry.register({ notifications: notificationsReducer as Reducer });\n      const { identifyApp, on } = chrome.init();\n\n      // You can use directly the name of your app\n      identifyApp(pckg.insights.appname);\n      insights.chrome.identifyApp('learningResources');\n      unregister = on('APP_NAVIGATION', (event) =>\n        history.push(`/${event.navId}`)\n      );\n    }\n    return () => {\n      unregister();\n    };\n  }, [chrome]);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider\n    store={init(\n      ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n    ).getStore()}\n  >\n    <Router basename={getBaseName(window.location.pathname)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst SamplePage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"SamplePage\" */ './Routes/SamplePage/SamplePage'\n    )\n);\nconst OopsPage = lazy(\n  () => import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"NoPermissionsPage\" */ './Routes/NoPermissionsPage/NoPermissionsPage'\n    )\n);\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/sample\" component={SamplePage} />\n      <Route path=\"/oops\" component={OopsPage} />\n      <Route path=\"/no-permissions\" component={NoPermissionsPage} />\n      {/* Finally, catch all unmatched routes */}\n      <Route>\n        <Redirect to=\"/sample\" />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware } from 'redux';\n\nexport let registry: ReducerRegistry<any>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n"],"names":["history","useHistory","chrome","useEffect","unregister","register","notifications","init","identifyApp","on","insights","event","push","navId","Fragment","store","getStore","basename","window","location","pathname","SamplePage","lazy","OopsPage","NoPermissionsPage","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","component","Redirect","to","errorDescriptionKey","middleware"],"sourceRoot":""}